name: scientific
version: 0.3.5.2
id: scientific-0.3.5.2-8Rb6EabQfAs5xxwaLfIoJd
key: scientific-0.3.5.2-8Rb6EabQfAs5xxwaLfIoJd
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 540f0cdae06946e0c840e171f2095e39
trusted: False
import-dirs: /Users/lambda/development/blog-post/.stack-work/install/x86_64-osx/lts-9.9/8.0.2/lib/x86_64-osx-ghc-8.0.2/scientific-0.3.5.2-8Rb6EabQfAs5xxwaLfIoJd
library-dirs: /Users/lambda/development/blog-post/.stack-work/install/x86_64-osx/lts-9.9/8.0.2/lib/x86_64-osx-ghc-8.0.2/scientific-0.3.5.2-8Rb6EabQfAs5xxwaLfIoJd
dynamic-library-dirs: /Users/lambda/development/blog-post/.stack-work/install/x86_64-osx/lts-9.9/8.0.2/lib/x86_64-osx-ghc-8.0.2
data-dir: /Users/lambda/development/blog-post/.stack-work/install/x86_64-osx/lts-9.9/8.0.2/share/x86_64-osx-ghc-8.0.2/scientific-0.3.5.2
hs-libraries: HSscientific-0.3.5.2-8Rb6EabQfAs5xxwaLfIoJd
depends:
    base-4.9.1.0 binary-0.8.3.0-7zVIbhpUcPY59pIuM2cesH
    bytestring-0.10.8.1-L7iExsmb1Cf5TULWmR5KHP containers-0.5.7.1
    deepseq-1.4.2.0 hashable-1.2.6.1-DEDGHETsHCM9X0O27C0qoG
    integer-gmp-1.0.0.1 integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
    primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
    text-1.2.2.2-LUGVXMAgqHxDWNL9LozoNJ
haddock-interfaces: /Users/lambda/development/blog-post/.stack-work/install/x86_64-osx/lts-9.9/8.0.2/doc/scientific-0.3.5.2/scientific.haddock
haddock-html: /Users/lambda/development/blog-post/.stack-work/install/x86_64-osx/lts-9.9/8.0.2/doc/scientific-0.3.5.2
